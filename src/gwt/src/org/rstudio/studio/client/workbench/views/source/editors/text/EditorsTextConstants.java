/*
 * EditorsTextConstants.java
 *
 * Copyright (C) 2022 by Posit Software, PBC
 *
 * Unless you have received this program directly from Posit Software pursuant
 * to the terms of a commercial license agreement with Posit Software, then
 * this program is licensed to you under the terms of version 3 of the
 * GNU Affero General Public License. This program is distributed WITHOUT
 * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the
 * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.
 *
 */
package org.rstudio.studio.client.workbench.views.source.editors.text;

public interface EditorsTextConstants extends com.google.gwt.i18n.client.Messages {
    String rConsole();
    String chunkFeedback();
    String chunkHtmlPageOutputFrame();
    String chunkHtmlOutputFrame();
    String chunkSatelliteWindowInitTitle();
    String noImageLabel(String path);
    String noImageLabelNoParentheses(String path);
    String doubleClickToZoom();
    String refactorServerRequestCallbackError();
    String onShinyCompareTestError();
    String onShinyCompareTestResponseCaption();
    String onShinyCompareTestResponseMessage();
    String checkTestPackageDependenciesError();
    String checkTestPackageDependenciesMessage();
    String checkTestPackageDependenciesCaption();
    String installShinyTestDependenciesError();
    String checkForExternalEditFileChangedMessage(String fileName);
    String checkForExternalEditFileChangedCaption();
    String checkForExternalEditFileDeletedMessage(String pathName);
    String checkForExternalEditFileDeletedCaption();
    String fireCompilePdfEventErrorMessage(String fileName);
    String fireCompilePdfEventErrorCaption();
    String onClearPrerenderedOutputMessage(String docPath);
    String onClearPrerenderedOutputCaption();
    String onClearKnitrCacheMessage(String docPath);
    String onClearKnitrCacheCaption();
    String generateNotebookCaption();
    String previewRpresentationMessage();
    String previewRpresentationCaption();
    String sourcePythonUserPrompt();
    String sourcePythonProgressCaption();
    String onSetWorkingDirToActiveDocMessage();
    String onSetWorkingDirToActiveDocCaption();
    String onGoToLineLabel();
    String onGoToLineTitle();
    String getCurrentStatusFileName(String emptyString);
    String getCurrentStatusFileType(String emptyString);
    String getCurrentStatusScope(String emptyString);
    String getCurrentStatusColumn(String emptyString);
    String getCurrentStatusRow();
    String noName();
    String none();
    String runAfter();
    String runPrevious();
    String runAll();
    String onInsertSectionLabel();
    String onInsertSectionTitle();
    String showFrontMatterEditorDialogMessage();
    String showFrontMatterEditorDialogCaption();
    String showFrontMatterEditorErrMsg();
    String showFrontMatterEditorErrCaption();
    String showFrontMatterEditorMessage();
    String functionNameLabel();
    String pleaseSelectCodeMessage();
    String extractActiveFunctionRefactoringName();
    String showRModeWarningMessage(String command);
    String showRModeWarningCaption();
    String variableName();
    String extractLocalVariableRefactoringName();
    String cancel();
    String reopenDocument();
    String onReopenSourceDocWithEncodingMessage();
    String onReopenSourceDocWithEncodingCaption();
    String onWordCountMessage(int totalWords, String selectedWordsText);
    String wordCount();
    String selectedWords(int selectionWords);
    String renameInScopeSelectedItemMessage(String selectedItem);
    String renameInScopeMatchesPlural();
    String renameInScopeMatch();
    String renameInScopeFoundMatchesMessage(int matches);
    String renameInScopeNoMatchesMessage(String selectionValue);
    String saveNewFileWithEncodingWarningMessage();
    String saveNewFileWithEncodingWarningCaption();
    String saveNewFileWithEncodingSaveFileCaption(String nameValue);
    String dontSave();
    String save();
    String saveWithPromptMessage(String documentName);
    String saveWithPromptCaption(String documentName);
    String closeAnyway();
    String onBeforeDismissMessage(String nameValue);
    String onBeforeDismissCaption(String nameValue);
    String addFunctionsToMenuText(String typeText);
    String chunks();
    String functions();
    String updateBreakpointWarningBarSourcedMessage();
    String updateBreakpointWarningBarPackageMessage(String pendingPackageName);
    String updateBreakpointWarningBarPackageLoadMessage();
    String updateBreakpointWarningBarFunctionMessage();
    String onBreakpointSetNewDocWarning();
    String onBreakpointSetPlumberfileWarning();
    String errorSavingSetting();
    String saveFile();
    String installTinyTeX();
    String installTinytexLowercase();
    String updateDebugWarningBarMessage();
    String beginQueuedCollabSessionNoLabel();
    String beginQueuedCollabSessionYesLabel();
    String beginQueuedCollabSessionMessage(String filename);
    String beginQueuedCollabSessionCaption();
    String onBreakpointsSavedWarningBar();
    String saveAsPathName(String stem, String extension);
    String onResponseReceivedMessage();
    String errorSavingFile();
    String onErrorMessage();
    String checkCompilersRnWPackageNotInstalled(String fRnWname, String forcontext, String fRnWPackage);
    String rnwFiles();
    String rnwFilesForProject();
    String thisFile();
    String checkCompilersServerWarning();
    String checkCompilersDesktopWarning();
    String checkCompilersRnWWeaveTypeError(String directiveName, String typeNames);
    String checkCompilersUnknownLatexType(String latexProgramDirective, String typeNames);
    String findingUsages();
    String checkBuildCppDependenciesRcppPackage();
    String checkBuildCppDependenciesToolsNotInstalled();
    String find();
    String findOrReplace();
    String previewJSErrorMessage(String functionString);
    String previewJSErrorCaption();
    String blockQuote();
    String verbatim();
    String descriptionList();
    String numberedList();
    String bulletList();
    String quote();
    String typewriter();
    String italic();
    String bold();
    String subSubsection();
    String subsection();
    String section();
    String untitledSlide();
    String noSlides();
    String rMarkdown();
    String rNotebook();
    String createDraftFromTemplateCaption(String fileType);
    String createDraftFromTemplateMessage(String name);
    String overwrite();
    String getTemplateContentErrorCaption();
    String getTemplateContentErrorMessage(String templatePath, String errorMessage);
    String getRMarkdownParamsFileCaption();
    String getRMarkdownParamsFileMessage();
    String cleanAndCreateTemplateCaption();
    String cleanAndCreateTemplateMessage(String path);
    String createDraftFromTemplateProgressMessage();
    String createDraftFromTemplateOnError(String templatePath, String target, String errorMessage);
    String showKnitrPreviewWarningBar(String feature, String requiredVersion);
    String spellcheck();
    String wordIsMisspelled(String word);
    String ignoreWord();
    String addToUserDictionary();
    String errorPreviewingSql();
    String sourceOnSave();
    String textEditor();
    String compareResults();
    String runTests();
    String compileReport(String cmdtext);
    String shinyTestOptions();
    String knitOptions();
    String runDocumentOptions();
    String sourceButtonTitle();
    String source();
    String sourceButtonTitleWithEcho(String title);
    String sourceOptions();
    String runSetupChunkAuto();
    String run();
    String runAppOptions();
    String runApiOptions();
    String show();
    String hide();
    String showWhitespace();
    String format();
    String codeTools();
    String actionOnSave(String action);
    String untitledTextEditor();
    String compilePdf();
    String rScript();
    String showRequiredPackagesMissingWarningCaption(String scriptname);
    String preview();
    String knitTo();
    String previewNotebook();
    String documentDirectory();
    String projectDirectory();
    String currentWorkingDirectory();
    String knitDirectory();
    String renderFormatName(String formatName);
    String presentation();
    String document();
    String setIsShinyFormatKnitCommandText(String docType);
    String setIsShinyFormatKnitDocumentButtonTitle(String doctype, String htmlString);
    String setIsNotebookFormatButtonTitle(String htmlString);
    String invokePublishCaption();
    String invokePublishMessage();
    String setFormatTextKnitCommandText(String text);
    String setFormatTextQuartoCommandText();
    String setFormatTextPreviewCommandText(String text);
    String sourceScript();
    String setSourceButtonFromScriptStatePythonDesc();
    String runScript();
    String setSourceButtonFromScriptStateDesc();
    String setSourceButtonFromScriptStateSavePreview();
    String reloadApp();
    String saveChangesAndReload();
    String runApp();
    String runTheShinyApp();
    String reloadApi();
    String saveChangesReloadPlumberApi();
    String runApi();
    String runPlumberApi();
    String previewInViewerPane();
    String previewInWindow();
    String noPreviewParentheses();
    String useVisualEditor();
    String previewImagesEquations();
    String showPreviewsInline();
    String chunkOutputInline();
    String chunkOutputInConsole();
    String knit();
    String render();
    String printFrame();
    String visual();
    String markdownEditingTools();
    String compilingCode();
    String runningShinyDocuments();
    String compilingNotebooks();
    String renderingR();
    String specifyingKnit();
    String creatingRMarkdown();
    String copilotWaiting();
    String copilotNoCompletions();
    String copilotResponseReceived();
    String copilotResponseErrorMessage(String message);
    String copilotEnabled();
    String copilotDisabled();
    String reformatDocumentOnSave();
}
