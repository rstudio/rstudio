/*
 * CoreClientConstants.java
 *
 * Copyright (C) 2022 by Posit Software, PBC
 *
 * Unless you have received this program directly from Posit Software pursuant
 * to the terms of a commercial license agreement with Posit Software, then
 * this program is licensed to you under the terms of version 3 of the
 * GNU Affero General Public License. This program is distributed WITHOUT
 * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the
 * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.
 *
 */
package org.rstudio.core.client;

public interface CoreClientConstants extends com.google.gwt.i18n.client.Messages {
    String cancelLabel();
    String resetLabel();
    String noLabel();
    String yesLabel();
    String okayLabel();
    String copyToClipboardLabel();
    String notYetImplementedCaption();
    String notYetImplementedMessage();
    String popupBlockCaption();
    String popupBlockTryAgainLabel();
    String secondLabel(int second);
    String secondPluralLabel(int seconds);
    String minuteLabel(int minute);
    String minutePluralLabel(int minutes);
    String hourLabel(int hour);
    String hourPluralLabel(int hours);
    String reportShortCutMessage();
    String multiGestureMessage();
    String shortcutUnBoundMessage();
    String nameEmptyMessage();
    String nameStartWithMessage();
    String nameIllegalCharacterMessage();
    String illegalNameMessage();
    String fileNameLabel();
    String getFilenameLabel();
    String nonexistentFileMessage();
    String openProjectTitle();
    String openButtonTitle();
    String rProjectsFilter();
    String newSessionCheckLabel();
    String createButtonTitle();
    String pathBreadCrumbSelectPath();
    String pathBreadCrumbButtonTitle();
    String projectIconDesc();
    String projectsLabel();
    String anchorHomeText();
    String cloudHomeText();
    String browseFolderCaption();
    String browseFolderLabel();
    String showOverwriteCaption();
    String showOverwriteMessage();
    String rSessionMessage();
    String rStudioServerMessage();
    String okButtonTitle();
    String addButtonTitle();
    String progressIndicatorTitle();
    String restartRequiredCaption();
    String promiseWithProgress();
    String promiseWithProgressError();
    String documentsTabList();
    String renameMenuItem();
    String copyPathMenuItem();
    String setWorkingDirMenuItem();
    String closeMenuItem();
    String closeAllMenuItem();
    String closeOthersMenuItem();
    String closeTabText();
    String docPropErrorMessage();
    String closePopupText();
    String themeButtonOnErrorMessage();
    String onSubmitErrorMessage();
    String installText();
    String donnotShowAgain();
    String showPanmirrorText();
    String reloadNowText();
    String installTinyTexText();
    String showReadOnlyWarningText();
    String showReadOnlyWarningGeneratedText();
    String buttonAddCaption();
    String buttonRemoveCaption();
    String localReposText();
    String localReposTitle();
    String addLocalRepoText();
    String errorCaption();
    String emptyLabel();
    String keyboardShortcutsText();
    String applyThemeButtonText();
    String radioButtonLabel();
    String radioCustomizedLabel();
    String filterWidgetLabel();
    String filterWidgetPlaceholderText();
    String resetButtonText();
    String resetKeyboardShortcutsCaption();
    String resetKeyboardShortcutsProgress();
    String nameColumnText();
    String editableTextColumn();
    String scopeTextColumn();
    String tagNameErrorMessage();
    String radioShowLabel();
    String customizeKeyboardHelpLink();
    String addMaskedCommandStylesText();
    String addConflictCommandStylesText();
    String refreshAutomaticallyLabel();
    String stopButtonText();
    String satelliteToolBarText();
    String searchWidgetClearText();
    String selectWidgetListBoxNone();
    String shortcutHeaderText();
    String tabsGroupName();
    String panesGroupName();
    String filesGroupName();
    String mainMenuGroupName();
    String sourceNavigationGroupName();
    String executeGroupName();
    String sourceEditorGroupName();
    String debugGroupName();
    String accessibilityGroupName();
    String sourceControlGroupName();
    String buildGroupName();
    String consoleGroupName();
    String terminalGroupName();
    String otherGroupName();
    String addShiftPTag();
    String useDefaultPrefix();
    String validateMessage();
    String notValidNumberMessage();
    String vimKeyboardShortcutsText();
    String findButtonText();
    String nextButtonText();
    String prevButtonText();
    String backButtonText();
    String dialogInfoText();
    String directoryContentsLabel();
    String newFolderTitle();
    String folderNameLabel();
    String dialogWarningText();
    String dialogQuestionText();
    String dialogPopupBlockedText();
    String dialogErrorText();
    String manualRefreshLabel();
    String busyLabel();
    String redactedText();
    String vimKeyboardShortcutHelpMessage();
    String showPopupBlockMessage(String hostName);
    String rpcErrorMessage(String statusCode, String desktop, String method);
    String rpcErrorMessageCaption();
    String rpcOverrideErrorMessage(String desktop, String method);
    String rpcOverrideErrorMessageServer(String platform);
    String rpcOverrideErrorMessageLink();
    String restartRequiredMessage();
    String minimizedTabListRole(String accessibleName);
    String closeText();
    String closeButtonText(String title);
    String minimizeState(String name);
    String maximizeState(String name);
    String normalState(String name);
    String hideState(String name);
    String exclusiveState(String name);
    String package1Message(String packages);
    String packages2Message(String package0, String package1);
    String packages3Message(String package0, String package1, String package2);
    String otherPackagesMessage(String package0, String package1, String package2);
    String resetKeyboardShortcutsMessage();
    String rStudioGinjectorErrorMessage(String label);
    String rStudioGinjectorGreaterThanError(String label, int minValue);
    String rStudioGinjectorLessThanError(String label, int maxValue);
    String operationCompletedText();
    String completedText(String labelText);
    String clearLabel();
    String fileChooserTextBoxBrowseLabel();
    String chooseFileCaption();
    String keyComboCtrl();
    String keyComboAlt();
    String keyComboShift();
    String keyComboCmd();
    String keyNameEnter();
    String keyNameLeft();
    String keyNameRight();
    String keyNameUp();
    String keyNameDown();
    String keyNameTab();
    String keyNamePageUp();
    String keyNamePageDown();
    String keyNameBackspace();
    String keyNameSpace();
}
