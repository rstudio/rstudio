def utils

pipeline {

  agent none

  options {
    disableConcurrentBuilds()
    buildDiscarder(
      logRotator(
        artifactDaysToKeepStr: '',
        artifactNumToKeepStr: '',
        daysToKeepStr: '',
        numToKeepStr: '100'
      )
    )
    // Timeout after no activity in the logs
    timeout(time: 2, unit: 'HOURS', activity: true)
  }

  parameters {
    string(name: 'COMMIT_HASH' , defaultValue: '')
    booleanParam(name: 'RSTUDIO_SKIP_QT', defaultValue: false, description: 'Skips installing and bulding for QT')
    booleanParam(name: 'DAILY', defaultValue: false, description: 'Runs daily build if true')
    booleanParam(name: 'PUBLISH', defaultValue: true, description: 'Runs publish stage if true')
    booleanParam(name: 'FORCE_BUILD_BINARIES', defaultValue: false, description: 'Force build binaries even if there are no changes, and even if they have already been built previously')
    string(name: 'SLACK_CHANNEL', defaultValue: '#ide-builds', description: 'Slack channel to publish build message.')
  }

  environment {
    OS = "windows"
    ARCH = "x86_64"
    PACKAGE_OS = 'Windows'
    AWS_ACCOUNT_ID = '749683154838'
    GIT_URL = "https://github.com/rstudio/rstudio"
    RSTUDIO_VERSION_FLOWER = ""
    RSTUDIO_VERSION_FILENAME = ""
    SHOULD_REBUILD = true // Set to true for now until rebuildCheck can run on Windows agents
  }

  stages{

    // Execute on a linux agent
    stage('Checkout Load and Version') {
      agent { label "linux" }
      stages {
        stage ('Checkout') { // checkout stage required here in order for versioning to work properly
          when { expression { params.COMMIT_HASH != '' } }
          steps {
            checkout([$class: 'GitSCM',
              branches: [[name: params.COMMIT_HASH]],
              extensions: [],
              userRemoteConfigs: [[credentialsId: 'posit-jenkins', url: GIT_URL]]])
          }
        }

        stage('Load Utils') {
          steps {
            script {
              sh 'printenv'
              sh "echo 'Loading utils from ${env.WORKSPACE}/jenkins/utils.groovy'"
              utils = load "${env.WORKSPACE}/jenkins/utils.groovy"
            }
          }
        }

        stage('Versioning') {
          steps {
            script {
              (RSTUDIO_VERSION,
                RSTUDIO_VERSION_MAJOR,
                RSTUDIO_VERSION_MINOR,
                RSTUDIO_VERSION_PATCH,
                RSTUDIO_VERSION_SUFFIX) = utils.getVersion(!params.DAILY)
              RSTUDIO_VERSION_FLOWER = utils.getFlower()
              currentBuild.displayName = "${RSTUDIO_VERSION}"
              IS_PRO = RSTUDIO_VERSION_SUFFIX.contains('pro')
              PACKAGE_NAME = "RStudio-${IS_PRO ? 'pro-' : ''}${RSTUDIO_VERSION.replace('+', '-')}"
              RSTUDIO_VERSION_FILENAME = utils.getVersionFilename(RSTUDIO_VERSION) // Define here for use later in utils.rebuildCheck()

              // Check if we should rebuild here on linux before moving into Windows build agent
              // Disabling for now since rebuildCheck uses FLAVOR, which isn't defined until we're in the matrix
              // SHOULD_REBUILD = utils.rebuildCheck()
            }
          }
        }
      }
      post {
        always {
          deleteDir()
        }
      }
    }

    // Build on windows agent
    stage('Build Windows') {
      environment {
        FLAVOR = "Electron"
        SM_HOST = credentials('SM_HOST')
        SM_API_KEY = credentials('SM_API_KEY')
        SM_CLIENT_CERT_FILE = credentials('SM_CLIENT_CERT_FILE')
        SM_CLIENT_CERT_PASSWORD = credentials('SM_CLIENT_CERT_PASSWORD')
        DIGICERT_KEYPAIR_ALIAS = credentials('DIGICERT_KEYPAIR_ALIAS')
        DIGICERT_CERTIFICATE_FINGERPRINT = credentials('DIGICERT_CERTIFICATE_FINGERPRINT')
      }
      agent {
        docker {
          image "jenkins/ide:${utils.getDockerTag()}"
            registryUrl 'https://263245908434.dkr.ecr.us-east-1.amazonaws.com'
            registryCredentialsId 'ecr:us-east-1:aws-build-role'
            reuseNode true
          label "windows"
          // Set a custom workspace relative to the workspace root (C:\Users\jenikns) to ensure file names
          // won't be too long
          customWorkspace "workspace/ide-${IS_PRO ? 'pro' : 'os'}-windows/${env.BRANCH_NAME.replace('/', '-')}"
        }
      }

      stages {
        stage ('Checkout') {
          when { expression { params.COMMIT_HASH != '' } }
          steps {
            checkout([$class: 'GitSCM',
              branches: [[name: params.COMMIT_HASH]],
              extensions: [],
              userRemoteConfigs: [[credentialsId: 'posit-jenkins', url: GIT_URL]]])
          }
        }

        stage('Build') {
          steps {
            // set requisite environment variables and build rstudio
            bat "cd package/win32 &&" +
              "set \"rstudio_version_major=${RSTUDIO_VERSION_MAJOR}\" &&" +
              "set \"rstudio_version_minor=${RSTUDIO_VERSION_MINOR}\" &&" +
              "set \"rstudio_version_patch=${RSTUDIO_VERSION_PATCH}\" &&" +
              "set \"rstudio_version_suffix=${RSTUDIO_VERSION_SUFFIX}\" &&" +
              "set \"package_os=windows\" &&" +
              "make-package.bat clean ${FLAVOR.toLowerCase()} &&" +
              "cd ../.."
          }
        }

        stage('Sign Executables') {
          environment {
            EXECUTABLES = """package\\win32\\build\\src\\cpp\\session\\rsession-utf8.exe ^
              package\\win32\\build\\src\\cpp\\session\\rsession.exe ^
              package\\win32\\build\\src\\cpp\\session\\x86\\rsession.exe ^
              package\\win32\\build\\src\\cpp\\session\\consoleio\\consoleio.exe ^
              package\\win32\\build\\src\\cpp\\session\\postback\\rpostback.exe ^
              package\\win32\\build\\src\\cpp\\diagnostics\\diagnostics.exe ^
              src\\node\\desktop\\out\\RStudio-win32-x64\\rstudio.exe"""
          }
          bat 'curl -o smtools-windows-x64.msi "https://rstudio-buildtools.s3.amazonaws.com/posit-dev/smtools-windows-x64.msi"' 
          bat 'msiexec /i smtools-windows-x64.msi /quiet /qn /L*V smtools-windows-x64.log'
          bat 'type smtools-windows-x64.log'
          bat 'C:\\Windows\\System32\\certutil.exe -csp "DigiCert Signing Manager KSP" -key -user'
          bat '"C:\\Program Files\\DigiCert\\DigiCert One Signing Manager Tools\\smksp_cert_sync"'
          bat '"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.19041.0\\x64\\signtool" sign /sha1 %DIGICERT_CERTIFICATE_FINGERPRINT% /td SHA256 /fd SHA256 ' + EXECUTABLES
          bat '"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.19041.0\\x64\\signtool\" verify /v /pa ' + EXECUTABLES
        }

        stage('Tests') {
          steps {
            bat 'cd package/win32/build/src/cpp && rstudio-tests.bat --scope core'
          }
        }

        // TODO(Kevin): Tests failing with exit code 255. Mark as unstable?
        // stage('Electron Tests') {
        //   when { environment name: 'FLAVOR', value: 'Electron' }
        //   steps {
        //     bat 'cd src/node/desktop && scripts\\run-unit-tests.cmd'
        //   }
        // }

        stage('Package') {
          steps {
            bat "cd package/win32 &&" +
              "set \"package_os=windows\" &&" +
              "make-dist-packages.bat &&" +
              "cd ../.."
          }
        }

        stage('Sign, Upload, and Publish') {
          when { expression { return params.PUBLISH } }

                environment {
                  LONG_PACKAGE_NAME = "${PACKAGE_NAME}-RelWithDebInfo"
                }

          stages {
            stage('Sign Installer') {
              steps {
                bat 'C:\\Windows\\System32\\certutil.exe -csp "DigiCert Signing Manager KSP" -key -user'
                bat '"C:\\Program Files\\DigiCert\\DigiCert One Signing Manager Tools\\smksp_cert_sync"'
                bat '"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.19041.0\\x64\\signtool" sign /sha1 %DIGICERT_CERTIFICATE_FINGERPRINT% /td SHA256 /fd SHA256 package\\win32\\build\\' + LONG_PACKAGE_NAME + '.exe'
                bat "\"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.19041.0\\x64\\signtool\" verify /v /pa package\\win32\\build\\${LONG_PACKAGE_NAME}.exe"
              }
            }

            stage('Upload') {
              environment {
                BUILD_DEST = "s3://rstudio-ide-build/${FLAVOR.toLowerCase()}/windows"
              }

              steps {
                // strip unhelpful suffixes from filenames
                bat "move package\\win32\\build\\${LONG_PACKAGE_NAME}.exe package\\win32\\build\\${PACKAGE_NAME}.exe"
                bat "move package\\win32\\build\\${LONG_PACKAGE_NAME}.zip package\\win32\\build\\${PACKAGE_NAME}.zip"

                // windows docker container cannot reach instance-metadata endpoint. supply credentials at upload.
                withAWS(role: 'ide-build', region: 'us-east-1') {
                  retry(5) {
                    bat "aws s3 cp package\\win32\\build\\${PACKAGE_NAME}.exe ${BUILD_DEST}/${PACKAGE_NAME}.exe"
                    bat "aws s3 cp package\\win32\\build\\${PACKAGE_NAME}.zip ${BUILD_DEST}/${PACKAGE_NAME}.zip"
                  }
                }
              }
            }

            stage ('Publish') {
              environment {
                GITHUB_LOGIN = credentials('posit-jenkins')
                PRODUCT = "${utils.getProductName()}"
                // This is being done to make the variables visible to the powershell call
                VERSION = "${RSTUDIO_VERSION}"
                PACKAGE = "${PACKAGE_NAME}"
                // Channel to prevent hourlies from ending up on the Dailies page
                CHANNEL = "${ params.DAILY ? 'Daily' : 'Hourly'}"
                AWS_PATH= "https://s3.amazonaws.com/rstudio-ide-build/${FLAVOR.toLowerCase()}/windows"
              }

              stages {
                stage("Publish Exe") {
                  steps {
                    echo "Publishing the following .exe build:"
                    echo "Product : ${PRODUCT}"
                    echo "Version : ${VERSION}"
                    echo "Package : ${PACKAGE}"
                    echo "Channel : ${CHANNEL}"
                    script {
                      // publish the build (self installing exe)
                      powershell '.\\docker\\jenkins\\publish-build.ps1 -build ${env:PRODUCT}/windows -url ${env:AWS_PATH}/${env:PACKAGE}.exe -pat ${env:GITHUB_LOGIN_PSW} -file package\\win32\\build\\${env:PACKAGE}.exe -version ${env:VERSION} -channel ${env:CHANNEL}'
                    }
                  }
                }

                // Only publish the zip for dailies, hourlies don't need it
                stage("Publish Zip") {
                  when {
                    allOf {
                      expression { return params.DAILY }
                    }
                  }
                  steps {
                    echo "Publishing the following .zip build:"
                    echo "Product : ${PRODUCT}"
                    echo "Version : ${VERSION}"
                    echo "Package : ${PACKAGE}"
                    echo "Channel : ${CHANNEL}"
                    script {
                      // publish the build (installer-less zip)
                      powershell '.\\docker\\jenkins\\publish-build.ps1 -build ${env:PRODUCT}/windows-xcopy -url ${env:AWS_PATH}/${env:PACKAGE}.zip -pat ${env:GITHUB_LOGIN_PSW} -file package\\win32\\build\\${env:PACKAGE}.zip -version ${env:VERSION} -channel ${env:CHANNEL}'
                    }
                  }
                }
              }
            }
          }
        }
      }
    } // Build Windows Stage

    // Run on linux agent
    stage ("Update Daily Build Redirects") {
      agent { label "linux" } 

      when { 
        anyOf {
          expression { return params.PUBLISH && params.DAILY && FLAVOR == "Electron" }
          expression { return params.PUBLISH && params.DAILY && FLAVOR == "Server" }
        }
      }

      environment {
        RSTUDIO_ORG_PEM = credentials('www-rstudio-org-pem')
        AWS_PATH= "${FLAVOR.toLowerCase()}/windows"
      }

      steps {
        // the updateDailyRedirects uses a bash script, so much be run on linux
        // Also depends on flavor, so must be in the matrix
        script {
          utils.updateDailyRedirects "${AWS_PATH}/${PACKAGE_NAME}.exe"
        }
      }

      post {
        always {
          deleteDir()
        }
      }
    } // stage ("Upload Daily Build Redirects")
  } // Root Stages
  post {
    always {
      sendNotifications slack_channel: SLACK_CHANNEL
    }
  }
}
