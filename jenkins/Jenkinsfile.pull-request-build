def utils

pipeline {
  agent {
    label 'linux-4x && x86_64'
  }

  environment {
    GITHUB_LOGIN = credentials('posit-jenkins')
    JENKINS_CREDENTIALS = credentials('jenkins-api-creds')
    OS = 'jammy'
    ARCH = 'x86_64'
    FLAVOR = 'default'
    TYPE = 'DEB'
    AWS_ACCOUNT_ID = '749683154838'
    RSTUDIO_VERSION_FLOWER = ''
    IS_PRO = false
    BASE_IMAGE = ""
    BUILD = false
  }

  stages {
    stage('Load Utils') {
      steps {
        script {

          sh "echo 'Loading utils from ${env.WORKSPACE}/jenkins/utils.groovy'"
          utils = load "${env.WORKSPACE}/jenkins/utils.groovy"
          utils.addRemoteRef("${env.CHANGE_TARGET}")

          RSTUDIO_VERSION_FLOWER = readFile(file: 'version/RELEASE').replaceAll(" ", "-").toLowerCase().trim()
          IS_PRO = JOB_URL.contains('Pro')
          BASE_IMAGE = "jenkins/ide:pro-jammy-x86_64-${RSTUDIO_VERSION_FLOWER}"
          
          // Passing true makes this return true if there are any changes outside of 'docs'
          BUILD = utils.hasChangesIn('docs/', true)

          // Set appropriate build flavor if unset
          if (FLAVOR == 'default') {
            if (IS_PRO) {
              FLAVOR = 'Server'
            } else {
              FLAVOR = 'Electron'
            }
          }

          // Log environment variables
          sh 'printenv | sort'

        }
      }
    }

    stage('Checkout') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: scm.branches,
          doGenerateSubmoduleConfigurations: true,
          extensions: scm.extensions + [[$class: 'SubmoduleOption', parentCredentials: true]],
          userRemoteConfigs: scm.userRemoteConfigs])
      }
    }

    // Initializes the pending checks for the PR so they show up in progress
    stage('Initialize Pending Checks') {
      steps {
        script {

          // Tests common to both Workbench and open source
          utils.postReviewCheck(title: "Build Package")
          utils.postReviewCheck(title: "GWT Unit Tests")
          utils.postReviewCheck(title: "C++ Unit Tests")

          // Workbench tests
          if (FLAVOR == 'Server' && IS_PRO) {
            utils.postReviewCheck(title: "Rust Unit Tests")
            utils.postReviewCheck(title: "Go Unit Tests")
            utils.postReviewCheck(title: "Homepage Tests")
          }

          // Automation currently only open source desktop
          if (FLAVOR == 'Electron' && !IS_PRO) {
            utils.postReviewCheck(title: "Automated Tests")
          }

        }
      }
    }

    stage('Build') {
      stages {
        stage('Prepare Build Container') {
          when {
            anyOf {
              expression {
                return utils.hasChangesIn('docker/')
              }
              expression {
                return utils.hasChangesIn('dependencies/')
              }
            }
          }
          steps {
            // AWS is here for the S3 bucket that we use for sccache
            withAWS(role: 'build', roleAccount: AWS_ACCOUNT_ID) {
              pullBuildPush(
                image_name: 'jenkins/ide',
                image_tag: "${utils.getDockerTag()}",
                dockerfile: "docker/jenkins/Dockerfile.${OS}",
                build_arg_jenkins_uid: 'JENKINS_UID',
                build_arg_jenkins_gid: 'JENKINS_GID',
                builds_args: "--build-arg GITHUB_LOGIN=${GITHUB_LOGIN}",
                push: false)
            }
          }
        }

        stage("Build and Test") {
          agent {
            docker {
              image "jenkins/ide:${utils.getDockerTag()}"
              registryCredentialsId 'ecr:us-east-1:aws-build-role'
              registryUrl 'https://263245908434.dkr.ecr.us-east-1.amazonaws.com'
              label "${utils.getLinuxAgentLabel(ARCH)}"
              reuseNode true
            }
          }

          stages {

            stage('Build Package') {
              environment {
                STAGE_NODE_URL = utils.getStageUrl(STAGE_NAME)
              }
              steps {
                dir ("package/linux") {
                  // AWS is here for the S3 bucket that we use for sccache
                  withAWS(role: 'build', roleAccount: AWS_ACCOUNT_ID) {
                    script {
                      utils.postReviewCheck(
                        title: 'Build Package',
                        status: 'in_progress',
                        summary: utils.getResultsMarkdownLink('Build Package', STAGE_NODE_URL),
                      )
                      // perform the compilation
                      sh "SCCACHE_ENABLED=1 PACKAGE_OS=${OS} ./make-${FLAVOR.toLowerCase()}-package ${TYPE} clean"
                    }
                  }
                }
              }
              //Archive the build
              post {
                success {
                  archiveArtifacts artifacts: "package/linux/build-${FLAVOR}-${TYPE}/rstudio-*.${TYPE.toLowerCase()}", fingerprint: true
                  script {
                    utils.postReviewCheck(
                      title: 'Build Package',
                      status: 'success',
                      details: 'Package built successfully',
                    )
                  }
                }
                failure {
                  script {
                    utils.postReviewCheck(
                      title: 'Build Package',
                      status: 'failure',
                      details: 'Package build failed',
                    )
                  }
                }
              }
            }

            stage("Run Tests") {
              parallel {
                stage('Run GWT Unit Tests') {
                  environment {
                    STAGE_NODE_URL = utils.getStageUrl(STAGE_NAME)
                  }
                  steps {
                    catchError(buildResult: null, stageResult: 'FAILURE') {
                      dir ("package/linux/build-${FLAVOR}-${TYPE}/src/gwt") {
                        script {
                          // attempt to run ant (gwt) unit tests
                          utils.runCheckCmd("./gwt-unit-tests.sh", "GWT Unit Tests", STAGE_NODE_URL)
                        }
                      }
                    }
                  }
                }

                stage('Run C++ Unit Tests') {
                  environment {
                    STAGE_NODE_URL = utils.getStageUrl(STAGE_NAME)
                  }
                  steps {
                    catchError(buildResult: null, stageResult: 'FAILURE') {
                      dir ("package/linux/build-${FLAVOR}-${TYPE}/src/cpp") {
                        script {
                          // attempt to run cpp unit tests
                          utils.runCheckCmd("./rstudio-tests", "C++ Unit Tests", STAGE_NODE_URL, true)
                        }
                      }
                    }
                  }
                }



                stage('Run Rust Unit Tests') {
                  environment {
                    STAGE_NODE_URL = utils.getStageUrl(STAGE_NAME)
                  }
                  when { expression { return FLAVOR == 'Server' && IS_PRO } } 
                  steps {
                    catchError(buildResult: null, stageResult: 'FAILURE') {
                      dir ("src/rust/user_service_nss") {
                        script {
                          // Just run the nss_pwb tests for now to keep it simple
                          // We may want to consider adding a rust workspace in the future if we add more rust targets
                          utils.runCheckCmd("cargo test", "Rust Unit Tests", STAGE_NODE_URL)
                        }
                      }
                    }
                  }
                }

                stage('Run Go Unit Tests') {
                  environment {
                    STAGE_NODE_URL = utils.getStageUrl(STAGE_NAME)
                  }
                  when { expression { return FLAVOR == 'Server' && IS_PRO } }
                  steps {
                    catchError(buildResult: null, stageResult: 'FAILURE') {
                      dir ("package/linux/build-${FLAVOR}-${TYPE}") {
                        script {
                          utils.runCheckCmd("ninja workbench-user-service-test", "Go Unit Tests", STAGE_NODE_URL)
                        }
                      }
                    }
                  }
                }

                stage('Run Homepage Tests') {
                  environment {
                    STAGE_NODE_URL = utils.getStageUrl(STAGE_NAME)
                  }
                  when { expression { return FLAVOR == 'Server' && IS_PRO } }
                  steps {
                    catchError(buildResult: null, stageResult: 'FAILURE') {
                      dir ("src/cpp/session/workspaces/www-sources") {
                        script {
                          utils.runCheckCmd("./run-tests.sh", "Homepage Tests", STAGE_NODE_URL)
                        }
                      }
                    }
                  }
                }
              }
            }

            stage('Run Automated Tests') {

              when { expression { return FLAVOR == 'Electron' && !IS_PRO } }

              environment {
                STAGE_NODE_URL = utils.getStageUrl(STAGE_NAME)
              }

              steps {
                catchError(buildResult: null, stageResult: 'UNSTABLE') {
                  dir ("src/node/desktop") {
                    script {
                      try {
                        utils.runCheckCmd("./run-automation", "Automated Tests", STAGE_NODE_URL, true)
                      } finally {
                        junit(allowEmptyResults: true, testResults: '*.xml')
                        archiveArtifacts(artifacts: 'screenshots/*.png,*.webm,*.xml', fingerprint: true)
                      }
                    }
                  }
                }
              }

            }
          }
        }
      }
    }
  }

  post {
    always {
      script {
        utils.finishReviewChecks(currentBuild.result)
      }
    }
  }
}
