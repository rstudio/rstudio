# escape=`

# https://hub.docker.com/r/microsoft/windows-servercore
FROM mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2019

# Use plain cmd shell for initial setup.
SHELL ["cmd", "/S", "/C"]

# Set JENKINS_URL if it's not currently set.
RUN if not defined JENKINS_URL ( setx /M JENKINS_URL jenkins-docker-build )

# Tell test scripts what operating system we are.
ENV OPERATING_SYSTEM=windows_10

# Work within build tools directory.
WORKDIR "C:/BuildTools"

#
# Installation instructions borrowed from:
#
#   https://learn.microsoft.com/en-us/visualstudio/install/build-tools-container?view=vs-2022
#
# If you need to add (or change) the components installed here, use:
#
#   https://learn.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-community?view=vs-2022
#
# to look up the associated component name.
#
# Note that we use this tool to install Visual Studio's build tools, as well as the
# required Windows 10 SDK, as chocolatey doesn't seem to provide the versions we need.
#

# Download the Build Tools bootstrapper.
RUN curl -SL --output vs_buildtools.exe https://aka.ms/vs/17/release/vs_buildtools.exe

# Install Build Tools. For whatever reason, this fails when we try to install
# into C:/Program Files (x86), so just use the "regular" C:/Program Files.
RUN start /w vs_buildtools.exe --quiet --wait --norestart --nocache `
    --installPath "C:/Program Files/Microsoft Visual Studio/2022/BuildTools" `
    --add Microsoft.VisualStudio.Workload.CoreEditor `
    --add Microsoft.VisualStudio.Workload.NativeDesktop `
    --add Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core `
    --add Microsoft.VisualStudio.Component.VC.CoreIde `
    --add Microsoft.VisualStudio.Component.VC.Redist.14.Latest `
    --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 `
    --add Microsoft.VisualStudio.Component.Windows10SDK.19041

# Clean up.
RUN del /q vs_buildtools.exe

# Use Powershell for the rest of the script.
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue'; "]

# Note: keep installed dependencies in-sync with Install-RStudio-Prereqs.ps1 for consistency
# between dev machines and the build machine.

# allow long filenames
RUN New-ItemProperty -Path "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem" `
   -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

# install chocolatey
RUN $env:chocolateyUseWindowsCompression = 'true'; `
    [System.Net.ServicePointManager]::SecurityProtocol = 3072 -bor 768 -bor 192 -bor 48; `
    iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

# install some deps via chocolatey
RUN `
  choco install -y -i ant; `
  choco install -y 7zip; `
  choco install -y awscli; `
  choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=""System""' --fail-on-error-output; `
  choco install -y jq; `
  choco install -y ninja --version "1.12.1"; `
  choco install -y nsis --version "3.10"; `
  choco install -y python313; `
  choco install -y strawberryperl; `
  choco install -y temurin11

# we use "R" for its real purpose, remove the Invoke-History powershell alias
RUN "echo 'Remove-Item alias:r' | Out-File $PsHome\Profile.ps1"

# install R to c:\R, a common c:\Program issue appears to only happen when installing in docker
RUN `
  [System.Net.ServicePointManager]::SecurityProtocol = 3072 -bor 768 -bor 192 -bor 48; `
  (New-Object System.Net.WebClient).DownloadFile('https://s3.amazonaws.com/rstudio-buildtools/R/R-3.6.3-win.exe', 'c:\R-3.6.3-win.exe') ;`
  Start-Process c:\R-3.6.3-win.exe -Wait -ArgumentList '/VERYSILENT /DIR="C:\R\R-3.6.3\"' ;`
  Remove-Item c:\R-3.6.3-win.exe -Force

# add R to path
RUN $env:path += ';C:\R\R-3.6.3\bin\x64\' ;`
  [Environment]::SetEnvironmentVariable('Path', $env:path, [System.EnvironmentVariableTarget]::Machine);

# install smtools
# TODO: remove the installation from the jenkinsfile once this is built into the base image
RUN `
  [System.Net.ServicePointManager]::SecurityProtocol = 3072 -bor 768 -bor 192 -bor 48 ;`
  (New-Object System.Net.WebClient).DownloadFile('https://rstudio-buildtools.s3.amazonaws.com/posit-dev/smtools-windows-x64.msi', 'smtools-windows-x64.msi') ;`
  Start-Process 'msiexec' -ArgumentList '/i smtools-windows-x64.msi /quiet /qn /norestart' ;`
  Remove-Item smtools-windows-x64.msi -Force

# cpack (an alias from chocolatey) and cmake's cpack conflict.
# Newer choco doesn't have this so don't fail if not found
RUN if (Test-Path 'C:\ProgramData\chocolatey\bin\cpack.exe') { Remove-Item -Force 'C:\ProgramData\chocolatey\bin\cpack.exe' }

RUN choco install -y git
RUN git config --global core.longpaths true

RUN New-Item -Path @( `
    'C:\rstudio-tools\dependencies\tools', `
    'C:\rstudio-tools\dependencies\common', `
    'C:\rstudio-tools\dependencies\windows' `
) -ItemType Directory -Force

COPY dependencies/tools/rstudio-tools.cmd 'C:\rstudio-tools\dependencies\tools\rstudio-tools.cmd'
COPY dependencies/common 'C:\rstudio-tools\dependencies\common'
COPY dependencies/windows 'C:\rstudio-tools\dependencies\windows'

# panmirror check for changes
ADD https://api.github.com/repos/quarto-dev/quarto/git/refs/heads/main panmirror.version.json
# ADD https://api.github.com/repos/quarto-dev/quarto/git/refs/heads/release/rstudio-sandyland-bluebonnet panmirror.version.json

ENV DOCKER_IMAGE_BUILD=1
WORKDIR C:/rstudio-tools/dependencies/windows
RUN C:/rstudio-tools/dependencies/windows/install-dependencies.cmd

#### this docker container will currently be used as a jenkins swarm slave, rather than instantiated on a swarm ####
##### the items below this are dependencies relevant to jenkins-swarm. #####
##### follow https://issues.jenkins-ci.org/browse/JENKINS-36776 to track docker windows support on jenkins #####

ENV JENKINS_SWARM_VERSION=3.15
RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 ; `
  Invoke-WebRequest $('https://repo.jenkins-ci.org/releases/org/jenkins-ci/plugins/swarm-client/{0}/swarm-client-{0}.jar' -f $env:JENKINS_SWARM_VERSION) -OutFile 'C:\swarm-client.jar' -UseBasicParsing ;
