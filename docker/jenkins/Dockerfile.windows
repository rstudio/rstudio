# escape=`

# Use the latest Windows Server Core (LTSC - Long Term Service Channel) image with .NET Framework 4.8.
# https://docs.microsoft.com/en-us/visualstudio/install/build-tools-container?view=vs-2019 
FROM mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2019

ENV OPERATING_SYSTEM=windows_10

# set RUN commands to use powershell
SHELL ["powershell"]

# Note: keep installed dependencies in-sync with Install-RStudio-Prereqs.ps1 for consistency
# between dev machines and the build machine.

# allow long filenames
RUN New-ItemProperty -Path "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem" `
   -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

# install chocolatey
RUN $env:chocolateyUseWindowsCompression = 'true'; `
    [System.Net.ServicePointManager]::SecurityProtocol = 3072 -bor 768 -bor 192 -bor 48; `
    iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

# install some deps via chocolatey
# pin python to 3.11 while this issue is pending: https://github.com/nodejs/node-gyp/issues/2869
RUN choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=""System""' --fail-on-error-output; `
  choco install -y temurin11; `
  choco install -y -i ant; `
  choco install -y 7zip; `
  choco install -y ninja --version "1.10.0"; `
  choco install -y python311; `
  choco install -y nsis --version "3.09"; `
  choco install -y jq

RUN mkdir -p 'C:\rstudio-tools\dependencies\tools'
RUN mkdir -p 'C:\rstudio-tools\dependencies\common'
RUN mkdir -p 'C:\rstudio-tools\dependencies\windows'

COPY dependencies/tools/rstudio-tools.cmd 'C:\rstudio-tools\dependencies\tools\rstudio-tools.cmd'
COPY dependencies/common 'C:\rstudio-tools\dependencies\common'
COPY dependencies/windows 'C:\rstudio-tools\dependencies\windows'

# vscollect.exe helps when diagnosing msvc install problems, used by msvc-install.cmd
ADD https://aka.ms/vscollect.exe 'C:\rstudio-tools\dependencies\windows\vscollect.exe'

SHELL ["cmd", "/S", "/C"]

RUN `
    # Download the Build Tools bootstrapper for version 17.13.35806.99
    # https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-history#fixed-version-bootstrappers
    curl -SL --output vs_buildtools.exe https://download.visualstudio.microsoft.com/download/pr/45212da0-ea11-4612-bbff-cf4b802a1640/7f34abca950bd22d49403ebf14f6e01b0cf9658e1150f7d0644d943df3dcce27/vs_BuildTools.exe `
    `
    # Install Build Tools
    && (call C:rstudio-tools\dependencies\windows\msvc-install.cmd vs_buildtools.exe --quiet --wait --norestart --nocache install `
        --add Microsoft.VisualStudio.Workload.VCTools `
        --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 `
        --add Microsoft.VisualStudio.Component.Windows11SDK.22621 `
        --remove Microsoft.VisualStudio.Component.Windows10SDK.10240 `
        --remove Microsoft.VisualStudio.Component.Windows10SDK.10586 `
        --remove Microsoft.VisualStudio.Component.Windows10SDK.14393 `
        --remove Microsoft.VisualStudio.Component.Windows81SDK `
        || IF "%ERRORLEVEL%"=="3010" EXIT 0) `
    `
    && del /q vs_buildtools.exe

SHELL ["powershell"]

# install aws cli
RUN choco install -y awscli

# we use "R" for its real purpose, remove the Invoke-History powershell alias
RUN "echo 'Remove-Item alias:r' | Out-File $PsHome\Profile.ps1"

# install R to c:\R, a common c:\Program issue appears to only happen when installing in docker
RUN $ErrorActionPreference = 'Stop' ;`
  [System.Net.ServicePointManager]::SecurityProtocol = 3072 -bor 768 -bor 192 -bor 48; `
  (New-Object System.Net.WebClient).DownloadFile('https://s3.amazonaws.com/rstudio-buildtools/R/R-3.6.3-win.exe', 'c:\R-3.6.3-win.exe') ;`
  Start-Process c:\R-3.6.3-win.exe -Wait -ArgumentList '/VERYSILENT /DIR="C:\R\R-3.6.3\"' ;`
  Remove-Item c:\R-3.6.3-win.exe -Force

# add R to path
RUN $env:path += ';C:\R\R-3.6.3\bin\i386\' ;`
  [Environment]::SetEnvironmentVariable('Path', $env:path, [System.EnvironmentVariableTarget]::Machine);

# install smtools 
# TODO: remove the installation from the jenkinsfile once this is built into the base image
RUN $ErrorActionPreference = 'Stop' ;`
  [System.Net.ServicePointManager]::SecurityProtocol = 3072 -bor 768 -bor 192 -bor 48 ;`
  (New-Object System.Net.WebClient).DownloadFile('https://rstudio-buildtools.s3.amazonaws.com/posit-dev/smtools-windows-x64.msi', 'smtools-windows-x64.msi') ;`
  Start-Process 'msiexec' -ArgumentList '/i smtools-windows-x64.msi /quiet /qn /norestart' ;`
  Remove-Item smtools-windows-x64.msi -Force

# cpack (an alias from chocolatey) and cmake's cpack conflict.
# Newer choco doesn't have this so don't fail if not found
RUN if (Test-Path 'C:\ProgramData\chocolatey\bin\cpack.exe') { Remove-Item -Force 'C:\ProgramData\chocolatey\bin\cpack.exe' }

RUN choco install -y git
RUN git config --global core.longpaths true

# panmirror check for changes
ADD https://api.github.com/repos/quarto-dev/quarto/git/refs/heads/main panmirror.version.json
# ADD https://api.github.com/repos/quarto-dev/quarto/git/refs/heads/release/rstudio-mariposa-orchid panmirror.version.json

WORKDIR C:/rstudio-tools/dependencies/windows
RUN C:/rstudio-tools/dependencies/windows/install-dependencies.cmd

#### this docker container will currently be used as a jenkins swarm slave, rather than instantiated on a swarm ####
##### the items below this are dependencies relevant to jenkins-swarm. #####
##### follow https://issues.jenkins-ci.org/browse/JENKINS-36776 to track docker windows support on jenkins #####

ENV JENKINS_SWARM_VERSION 3.15
RUN [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 ; `
  Invoke-WebRequest $('https://repo.jenkins-ci.org/releases/org/jenkins-ci/plugins/swarm-client/{0}/swarm-client-{0}.jar' -f $env:JENKINS_SWARM_VERSION) -OutFile 'C:\swarm-client.jar' -UseBasicParsing ;
