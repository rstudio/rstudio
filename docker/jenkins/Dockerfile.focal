ARG ARCH=amd64
FROM --platform=linux/$ARCH ubuntu:focal
ARG ARCH

ENV OPERATING_SYSTEM=ubuntu_focal

ARG AWS_REGION=us-east-1

# install needed packages. replace httpredir apt source with cloudfront
RUN set -x \
    && sed -i "s/archive.ubuntu.com/$AWS_REGION.ec2.archive.ubuntu.com/" /etc/apt/sources.list \
    && export DEBIAN_FRONTEND=noninteractive \
    && apt-get update 

RUN apt-get update && \
    export DEBIAN_FRONTEND=noninteractive && \
    apt-get install -y \
    ant \
    build-essential \
    clang \
    curl \
    debsigs \
    dpkg-sig \
    expect \
    fakeroot \
    git-core \
    gnupg1 \
    jq \
    libacl1-dev \
    libattr1-dev \
    libbz2-dev \
    libcap-dev \
    libcurl4-openssl-dev \
    libegl1-mesa \
    libfreetype6-dev \
    libfuse2 \
    libgl1-mesa-dev \
    libgtk-3-0 \
    libjpeg-dev \
    libpam-dev \
    libpango1.0-dev \
    libpng-dev \
    libpq-dev \
    libsqlite3-dev \
    libssl-dev \
    libtiff5-dev \
    libxml2-dev \
    libxslt1-dev \
    lsof \
    ninja-build \
    openjdk-11-jdk \
    p7zip-full \
    pkg-config \
    python \
    r-base \
    sudo \
    unzip \
    uuid-dev \
    valgrind \
    wget \
    whois \
    xvfb \
    zlib1g-dev


# If ARCH=amd64, install gcc-multilib
RUN if [ "$ARCH" = "amd64" ]; then \
    apt-get update && \
    export DEBIAN_FRONTEND=noninteractive && \
    apt-get install -y \
    gcc-multilib \
    ; fi


# ensure we use the java 11 compiler
RUN update-alternatives --set java /usr/lib/jvm/java-11-openjdk-$(dpkg --print-architecture)/bin/java

## build patchelf
RUN cd /tmp \
    && wget https://nixos.org/releases/patchelf/patchelf-0.9/patchelf-0.9.tar.gz \
    && tar xzvf patchelf-0.9.tar.gz \
    && cd patchelf-0.9 \
    && ./configure \
    && make \
    && make install

# copy RStudio tools (needed so that our other dependency scripts can find it)
RUN mkdir -p /tools
COPY dependencies/tools/rstudio-tools.sh /tools/rstudio-tools.sh

RUN mkdir -p /opt/rstudio-tools/dependencies/tools
COPY dependencies/tools/rstudio-tools.sh /opt/rstudio-tools/dependencies/tools/rstudio-tools.sh

# run install-boost twice - boost exits 1 even though it has installed good enough for our uses.
# https://github.com/rstudio/rstudio/blob/master/vagrant/provision-primary-user.sh#L12-L15
COPY dependencies/common/install-boost /tmp/
RUN bash /tmp/install-boost || bash /tmp/install-boost

# install cmake
COPY package/linux/install-dependencies /tmp/
RUN /bin/bash /tmp/install-dependencies

# install crashpad and its dependencies
COPY dependencies/common/install-crashpad /tmp/
RUN bash /tmp/install-crashpad bionic

# copy common dependency installation scripts
RUN mkdir -p /opt/rstudio-tools/dependencies/common
COPY dependencies/common/ /opt/rstudio-tools/dependencies/common/

# panmirror check for changes
ADD https://api.github.com/repos/quarto-dev/quarto/git/refs/heads/main panmirror.version.json
# ADD https://api.github.com/repos/quarto-dev/quarto/git/refs/heads/release/rstudio-mariposa-orchid panmirror.version.json

# install common dependencies
RUN cd /opt/rstudio-tools/dependencies/common && /bin/bash ./install-common focal
# panmirror needs to be able to build in this location
RUN chmod -R 777 /opt/rstudio-tools/src

# cachebust for Quarto release
ADD https://quarto.org/docs/download/_download.json quarto_releases
RUN cd /opt/rstudio-tools/dependencies/common && /bin/bash ./install-quarto

# set github login from build argument if defined
ARG GITHUB_LOGIN
ENV RSTUDIO_GITHUB_LOGIN=$GITHUB_LOGIN

# Set Rust environment variables
ENV PATH="/opt/rstudio-tools/dependencies/common/overlay/rust/bin:${PATH}"
ENV CARGO_HOME="/opt/rstudio-tools/dependencies/common/overlay/rust"
ENV RUSTUP_HOME="/opt/rstudio-tools/dependencies/common/overlay/rust"
RUN if [ -d "/opt/rstudio-tools/dependencies/common/overlay/rust" ]; then \
    chmod -R 777 /opt/rstudio-tools/dependencies/common/overlay/rust \
    ; fi

# create jenkins user, make sudo. try to keep this toward the bottom for less cache busting
ARG JENKINS_GID=999
ARG JENKINS_UID=999
RUN groupadd -g $JENKINS_GID jenkins && \
    useradd -m -d /var/lib/jenkins -u $JENKINS_UID -g jenkins jenkins && \
    echo "jenkins ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

RUN if [ -d "/src" ]; then git config --global --add safe.directory /src; fi
