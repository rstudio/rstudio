ARG ARCH=amd64
FROM --platform=linux/$ARCH opensuse/leap:15.6
ARG ARCH

ENV OPERATING_SYSTEM=opensuse_leap15

# refresh repos and install required packages
RUN zypper --non-interactive --gpg-auto-import-keys refresh && \
    zypper --non-interactive install -y \
    ant \
    autoconf \
    automake \
    clang \
    curl \
    expect \
    fakeroot \
    freetype-devel  \
    gcc \
    gcc-c++ \
    gdb \
    gettext \
    git \
    java-17-openjdk-devel \
    jq \
    libXcursor-devel \
    libXrandr-devel \
    libacl-devel \
    libatk-1_0-0 \
    libatk-bridge-2_0-0 \
    libattr-devel \
    libcap-devel \
    libcups2 \
    libcurl-devel \
    libgtk-3-0 \
    libjpeg-devel \
    libopenssl-devel \
    libpng-devel  \
    libtiff-devel  \
    libtool \
    libuuid-devel \
    libxml2-devel \
    lsof \
    make \
    ninja \
    p7zip-full \
    pam-devel \
    pango-devel \
    postgresql-devel \
    ps \
    python \
    python-xml \
    python311 \
    R \
    rpm-build \
    sqlite3-devel \
    sudo \
    tar \
    unzip \
    valgrind \
    wget \
    xml-commons-apis \
    xvfb-run \
    zlib-devel \
    && zypper clean -a

# use python3.11; the default is python 3.6 which is too old for node-gyp
RUN rm /usr/bin/python3
RUN ln /usr/bin/python3.11 /usr/bin/python3

# copy RStudio tools (needed so that our other dependency scripts can find it)
RUN mkdir -p /tools
COPY dependencies/tools/rstudio-tools.sh /tools/rstudio-tools.sh

RUN mkdir -p /opt/rstudio-tools/dependencies/tools
COPY dependencies/tools/rstudio-tools.sh /opt/rstudio-tools/dependencies/tools/rstudio-tools.sh

# run install-boost twice - boost exits 1 even though it has installed good enough for our uses.
# https://github.com/rstudio/rstudio/blob/master/vagrant/provision-primary-user.sh#L12-L15
COPY dependencies/common/install-boost /tmp/
RUN bash /tmp/install-boost || bash /tmp/install-boost

# install cmake
COPY package/linux/install-dependencies /tmp/
RUN bash /tmp/install-dependencies

# install crashpad and its dependencies
COPY dependencies/common/install-crashpad /tmp/
RUN bash /tmp/install-crashpad opensuse15

# ensure we use the java 17 compiler
RUN update-alternatives --set java /usr/lib64/jvm/jre-17-openjdk/bin/java

# copy common dependency installation scripts
RUN mkdir -p /opt/rstudio-tools/dependencies/common
COPY dependencies/common/ /opt/rstudio-tools/dependencies/common/

# panmirror check for changes
# ADD https://api.github.com/repos/quarto-dev/quarto/git/refs/heads/main panmirror.version.json
ADD https://api.github.com/repos/quarto-dev/quarto/git/refs/heads/release/rstudio-cucumberleaf-sunflower panmirror.version.json

# install common dependencies
RUN cd /opt/rstudio-tools/dependencies/common && /bin/bash ./install-common opensuse15
# panmirror needs to be able to build in this location
RUN chmod -R 777 /opt/rstudio-tools/src

# install GnuPG 1.4 from source (needed for release signing)
RUN cd /tmp && \
    wget https://gnupg.org/ftp/gcrypt/gnupg/gnupg-1.4.23.tar.bz2 && \
    bzip2 -d gnupg-1.4.23.tar.bz2 && \
    tar xvf gnupg-1.4.23.tar && \
    cd gnupg-1.4.23 && \
    ./configure && \
    make && \
    make install

# cachebust for Quarto release
ADD https://quarto.org/docs/download/_download.json quarto_releases
RUN cd /opt/rstudio-tools/dependencies/common && /bin/bash ./install-quarto

# set github login from build argument if defined
ARG GITHUB_LOGIN
ENV RSTUDIO_GITHUB_LOGIN=$GITHUB_LOGIN

# Set Rust environment variables
ENV PATH="/opt/rstudio-tools/dependencies/common/overlay/rust/bin:${PATH}"
ENV CARGO_HOME="/opt/rstudio-tools/dependencies/common/overlay/rust"
ENV RUSTUP_HOME="/opt/rstudio-tools/dependencies/common/overlay/rust"
RUN if [ -d "/opt/rstudio-tools/dependencies/common/overlay/rust" ]; then \
    chmod -R 777 /opt/rstudio-tools/dependencies/common/overlay/rust \
    ; fi

# create nobody user and group, used by unit tests
RUN groupadd -g 65534 nobody && \
    useradd -m -d /var/lib/nobody -u 65534 -g nobody nobody

# create jenkins user, make sudo. try to keep this toward the bottom for less cache busting
ARG JENKINS_GID=999
ARG JENKINS_UID=999
RUN groupadd -g $JENKINS_GID jenkins && \
    useradd -m -d /var/lib/jenkins -u $JENKINS_UID -g jenkins jenkins && \
    echo "jenkins ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

RUN if [ -d "/src" ]; then git config --global --add safe.directory /src; fi
