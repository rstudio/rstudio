ARG ARCH=amd64
FROM --platform=linux/$ARCH rockylinux:8

ENV OPERATING_SYSTEM=rockylinux_8

RUN set -x \
      && yum install epel-release -y \
      && yum install dnf-plugins-core -y \
      && yum config-manager --set-enabled powertools \
      && yum update -y

RUN yum install -y \
    ant \
    autoconf \
    automake \
    boost-devel \
    bzip2-devel \
    clang-devel \
    expect \
    fakeroot \
    freetype-devel \
    fuse-libs \
    gcc \
    gcc-c++ \
    gdb \
    gettext \
    git \
    gtk3 \
    java-17-openjdk \
    java-17-openjdk-devel \
    jq \
    libXScrnSaver-devel \
    libXcursor-devel \
    libXrandr-devel \
    libacl-devel \
    libcap-devel \
    libcurl-devel \
    libpq-devel \
    libtool \
    libuuid-devel \
    libxml2-devel \
    llvm-devel \
    libjpeg-turbo-devel \
    libpng-devel \
    libtiff-devel \
    lsof \
    make \
    ninja-build \
    mesa-libGL-devel \
    openssl-devel \
    p7zip \
    p7zip-plugins \
    pam-devel \
    pango-devel \
    patchelf \
    postgresql-devel \
    python2 \
    python3.11 \
    R \
    rpmdevtools \
    rpm-sign \
    sqlite-devel \
    sudo \
    valgrind \
    wget \
    whois \
    xorg-x11-server-Xvfb \
    zlib-devel

# make sure the Java 17 JDK is used by default
RUN alternatives --set java  $(readlink -f /usr/lib/jvm/java-17-openjdk/bin/java)
RUN alternatives --set javac $(readlink -f /usr/lib/jvm/java-17-openjdk/bin/javac)

# copy RStudio tools (needed so that our other dependency scripts can find it)
RUN mkdir -p /tools
COPY dependencies/tools/rstudio-tools.sh /tools/rstudio-tools.sh

RUN mkdir -p /opt/rstudio-tools/dependencies/tools
COPY dependencies/tools/rstudio-tools.sh /opt/rstudio-tools/dependencies/tools/rstudio-tools.sh

# run install-boost twice - boost exits 1 even though it has installed good enough for our uses.
# https://github.com/rstudio/rstudio/blob/master/vagrant/provision-primary-user.sh#L12-L15
COPY dependencies/common/install-boost /tmp/
RUN bash /tmp/install-boost || bash /tmp/install-boost

# install cmake
COPY package/linux/install-dependencies /tmp/
RUN bash /tmp/install-dependencies

# copy python2 to python so that it can be picked up by Google scripts
RUN cp /usr/bin/python2 /usr/bin/python

# install crashpad and its dependencies
COPY dependencies/common/install-crashpad /tmp/
RUN bash /tmp/install-crashpad rhel8

# copy common dependency installation scripts
RUN mkdir -p /opt/rstudio-tools/dependencies/common
COPY dependencies/common/ /opt/rstudio-tools/dependencies/common/

# panmirror check for changes
ADD https://api.github.com/repos/quarto-dev/quarto/git/refs/heads/main panmirror.version.json
# ADD https://api.github.com/repos/quarto-dev/quarto/git/refs/heads/release/rstudio-apple-blossom panmirror.version.json

# install common dependencies
RUN cd /opt/rstudio-tools/dependencies/common && /bin/bash ./install-common rhel8
# panmirror needs to be able to build in this location
RUN chmod -R 777 /opt/rstudio-tools/src

# get libuser header files (libuser-devel not currently available on rhel8)
RUN wget https://pagure.io/libuser/archive/libuser-0.62/libuser-libuser-0.62.tar.gz
RUN tar zxvf libuser-libuser-0.62.tar.gz
RUN mkdir -p /usr/include/libuser
RUN cp libuser-libuser-0.62/lib/*.h /usr/include/libuser

# build and install gpg1.4 which we need to sign the builds in headless mode
# this is unavailable in the official rhel8 repos
RUN wget https://gnupg.org/ftp/gcrypt/gnupg/gnupg-1.4.23.tar.bz2
RUN tar xvf gnupg-1.4.23.tar.bz2
RUN cd gnupg-1.4.23 && ./configure --prefix=/gnupg1 && make && make install
RUN ln -s /gnupg1/bin/gpg /usr/local/bin/gpg1

# cachebust for Quarto release
ADD https://quarto.org/docs/download/_download.json quarto_releases
RUN cd /opt/rstudio-tools/dependencies/common && /bin/bash ./install-quarto

# set github login from build argument if defined
ARG GITHUB_LOGIN
ENV RSTUDIO_GITHUB_LOGIN=$GITHUB_LOGIN

# Set Rust environment variables
ENV PATH="/opt/rstudio-tools/dependencies/common/overlay/rust/bin:${PATH}"
ENV CARGO_HOME="/opt/rstudio-tools/dependencies/common/overlay/rust"
ENV RUSTUP_HOME="/opt/rstudio-tools/dependencies/common/overlay/rust"
RUN if [ -d "/opt/rstudio-tools/dependencies/common/overlay/rust" ]; then \
    chmod -R 777 /opt/rstudio-tools/dependencies/common/overlay/rust \
    ; fi

# remove any previous users with conflicting IDs
ARG JENKINS_GID=999
ARG JENKINS_UID=999
COPY docker/jenkins/*.sh /tmp/
RUN /tmp/clean-uid.sh $JENKINS_UID && \
    /tmp/clean-gid.sh $JENKINS_GID

# create jenkins user, make sudo. try to keep this toward the bottom for less cache busting
RUN groupadd -g $JENKINS_GID jenkins && \
    useradd -m -d /var/lib/jenkins -u $JENKINS_UID -g jenkins jenkins && \
    echo "jenkins ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

RUN if [ -d "/src" ]; then git config --global --add safe.directory /src; fi
